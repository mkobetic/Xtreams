parsers
parserBootstrap
	"WARNING: This method was generated with the following code:
		PEGParser parserPEG parse: 'Grammar' stream: PEGParser grammarPEG actor: PEGParserGenerator new

	 *** This is circular. You need a working bootstrap to get a PEG parser to then generate source code to generate a PEG parser.
	 *** Do not replace this method unless you are 100% sure your new parser code is correct"

	| generator definitions |
	definitions := OrderedCollection new.
	generator := PEGParserParser new.
	definitions add: (generator Definition: 'Grammar' expression: (generator Sequence: (OrderedCollection new add: (generator Node: (generator Reference: 'Definition') modifier: nil cardinality: generator PLUS); add: (generator Node: generator DOT modifier: generator NOT cardinality: nil); yourself))).
	definitions add: (generator Definition: 'Definition' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 's'); add: (generator Reference: 'Identifier'); add: (generator Reference: 's'); add: (generator Expression: (generator Reference: 'ASSIGN') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'DefinitionError')); yourself)); add: (generator Reference: 's'); add: (generator Reference: 'Expression'); add: (generator Reference: 's'); yourself))).
	definitions add: (generator Definition: 'DefinitionError' expression: (generator Node: (generator Sequence: (OrderedCollection new add: (generator Node: (generator Reference: 'S') modifier: generator NOT cardinality: nil); add: generator DOT; yourself)) modifier: nil cardinality: generator STAR)).
	definitions add: (generator Definition: 'Expression' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'Sequence'); add: (generator Node: (generator Expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'SLASH'); add: (generator Reference: 's'); add: (generator Reference: 'Sequence'); yourself)) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Reference: 'SequenceError'); add: (generator Reference: 's'); yourself))); yourself)) modifier: nil cardinality: generator STAR); yourself))).
	definitions add: (generator Definition: 'Sequence' expression: (generator Node: (generator Reference: 'Node') modifier: nil cardinality: generator PLUS)).
	definitions add: (generator Definition: 'SequenceError' expression: (generator Reference: 'SLASH')).
	definitions add: (generator Definition: 'Node' expression: (generator Expression: (generator Sequence: (OrderedCollection new add: (generator Node: (generator Reference: 'Prefix') modifier: nil cardinality: generator QUESTION); add: (generator Reference: 'Primary'); add: (generator Node: (generator Reference: 'Suffix') modifier: nil cardinality: generator QUESTION); add: (generator Reference: 's'); yourself)) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Node: (generator Reference: 'SLASH') modifier: generator NOT cardinality: nil); add: (generator Node: (generator Sequence: (OrderedCollection new add: (generator Reference: 'Identifier'); add: (generator Reference: 's'); add: (generator Reference: 'ASSIGN'); yourself)) modifier: generator NOT cardinality: nil); add: (generator Node: (generator Reference: 'CLOSE_PAREN') modifier: generator NOT cardinality: nil); add: (generator Node: (generator Reference: 'CLOSE_BRACE') modifier: generator NOT cardinality: nil); add: (generator Reference: 'NodeError'); add: (generator Reference: 's'); yourself))); yourself))).
	definitions add: (generator Definition: 'NodeError' expression: generator DOT).
	definitions add: (generator Definition: 'Primary' expression: (generator Expression: (generator Reference: 'Reference') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'Group')); add: (Array with: '/' with: #() with: (generator Reference: 'Literal')); add: (Array with: '/' with: #() with: (generator Reference: 'Range')); add: (Array with: '/' with: #() with: (generator Reference: 'DOT')); yourself))).
	definitions add: (generator Definition: 'Reference' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'Identifier'); add: (generator Reference: 's'); add: (generator Node: (generator Reference: 'ASSIGN') modifier: generator NOT cardinality: nil); yourself))).
	definitions add: (generator Definition: 'Group' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'OPEN_PAREN'); add: (generator Reference: 's'); add: (generator Reference: 'Expression'); add: (generator Reference: 's'); add: (generator Reference: 'CLOSE_PAREN'); yourself))).
	definitions add: (generator Definition: 'Prefix' expression: (generator Expression: (generator Reference: 'AND') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'NOT')); yourself))).
	definitions add: (generator Definition: 'Suffix' expression: (generator Expression: (generator Reference: 'Cardinality') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'QUESTION')); add: (Array with: '/' with: #() with: (generator Reference: 'STAR')); add: (Array with: '/' with: #() with: (generator Reference: 'PLUS')); yourself))).
	definitions add: (generator Definition: 'Literal' expression: (generator Expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'QUOTE'); add: (generator Node: (generator Reference: 'LiteralEntity') modifier: nil cardinality: (generator CardinalityLoop: (generator Reference: 'QUOTE'))); yourself)) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Reference: 'DOUBLE_QUOTE'); add: (generator Node: (generator Reference: 'LiteralEntity') modifier: nil cardinality: (generator CardinalityLoop: (generator Reference: 'DOUBLE_QUOTE'))); yourself))); yourself))).
	definitions add: (generator Definition: 'LiteralEntity' expression: (generator Expression: (generator Reference: 'Escape') rest: (OrderedCollection new add: (Array with: '/' with: #() with: generator DOT); yourself))).
	definitions add: (generator Definition: 'Range' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'OPEN_BRACKET'); add: (generator Reference: 's'); add: (generator Node: (generator Literal: '^') modifier: nil cardinality: generator QUESTION); add: (generator Node: (generator Reference: 'RangeSet') modifier: nil cardinality: (generator CardinalityLoopMin: 1 test: (generator Reference: 'CLOSE_BRACKET'))); yourself))).
	definitions add: (generator Definition: 'RangeSet' expression: (generator Expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 's'); add: (generator Reference: 'LiteralEntity'); add: (generator Reference: 'DASH'); add: (generator Reference: 'LiteralEntity'); add: (generator Reference: 's'); yourself)) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Reference: 's'); add: (generator Reference: 'LiteralEntity'); add: (generator Reference: 's'); yourself))); yourself))).
	definitions add: (generator Definition: 'Cardinality' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'OPEN_BRACE'); add: (generator Reference: 's'); add: (generator Expression: (generator Reference: 'CardinalityRange') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'CardinalityLoopMin')); add: (Array with: '/' with: #() with: (generator Reference: 'CardinalityRangeMin')); add: (Array with: '/' with: #() with: (generator Reference: 'CardinalityLoop')); yourself)); add: (generator Reference: 's'); add: (generator Reference: 'CLOSE_BRACE'); yourself))).
	definitions add: (generator Definition: 'CardinalityRangeMin' expression: (generator Reference: 'NumLiteral')).
	definitions add: (generator Definition: 'CardinalityRange' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'NumLiteral'); add: (generator Reference: 's'); add: (generator Reference: 'COMMA'); add: (generator Reference: 's'); add: (generator Reference: 'NumLiteral'); yourself))).
	definitions add: (generator Definition: 'CardinalityLoopMin' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'NumLiteral'); add: (generator Reference: 's'); add: (generator Reference: 'COMMA'); add: (generator Reference: 's'); add: (generator Reference: 'Expression'); yourself))).
	definitions add: (generator Definition: 'CardinalityLoop' expression: (generator Reference: 'Expression')).
	definitions add: (generator Definition: 'Identifier' expression: (generator Sequence: (OrderedCollection new add: (generator Range: nil sets: (OrderedCollection new add: (97 to: 122); add: (65 to: 90); add: (95 to: 95); yourself)); add: (generator Node: (generator Range: nil sets: (OrderedCollection new add: (97 to: 122); add: (65 to: 90); add: (48 to: 57); add: (95 to: 95); yourself)) modifier: nil cardinality: generator STAR); yourself))).
	definitions add: (generator Definition: 'NumLiteral' expression: (generator Expression: (generator Literal: 'Infinity') rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Literal: '0')); add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Range: nil sets: (OrderedCollection new add: (49 to: 57); yourself)); add: (generator Node: (generator Range: nil sets: (OrderedCollection new add: (48 to: 57); yourself)) modifier: nil cardinality: generator STAR); yourself))); yourself))).
	definitions add: (generator Definition: 'Escape' expression: (generator Expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'BACKSLASH'); add: (generator Range: nil sets: (OrderedCollection new add: (120 to: 120); yourself)); add: (generator Node: (generator Range: nil sets: (OrderedCollection new add: (48 to: 57); add: (65 to: 70); yourself)) modifier: nil cardinality: (generator CardinalityRangeMin: 6)); yourself)) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Sequence: (OrderedCollection new add: (generator Reference: 'BACKSLASH'); add: (generator Range: nil sets: (OrderedCollection new add: (110 to: 110); add: (114 to: 114); add: (116 to: 116); add: (115 to: 115); add: (45 to: 45); add: (92 to: 92); add: (91 to: 91); add: (93 to: 93); add: (39 to: 39); add: (34 to: 34); yourself)); yourself))); add: (Array with: '/' with: #() with: (generator Reference: 'EscapeError')); yourself))).
	definitions add: (generator Definition: 'EscapeError' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'BACKSLASH'); add: generator DOT; yourself))).
	definitions add: (generator Definition: 's' expression: (generator Node: (generator Reference: 'S') modifier: nil cardinality: generator STAR)).
	definitions add: (generator Definition: 'S' expression: (generator Expression: (generator Node: (generator Reference: 'whitespace') modifier: nil cardinality: generator PLUS) rest: (OrderedCollection new add: (Array with: '/' with: #() with: (generator Reference: 'comment')); yourself))).
	definitions add: (generator Definition: 'comment' expression: (generator Sequence: (OrderedCollection new add: (generator Reference: 'OPEN_COMMENT'); add: (generator Node: (generator Reference: 'comment_body') modifier: nil cardinality: (generator CardinalityLoop: (generator Reference: 'CLOSE_COMMENT'))); yourself))).
	definitions add: (generator Definition: 'comment_body' expression: (generator Expression: (generator Reference: 'comment') rest: (OrderedCollection new add: (Array with: '/' with: #() with: generator DOT); yourself))).
	definitions add: (generator Definition: 'whitespace' expression: (generator Range: nil sets: (OrderedCollection new add: (32 to: 32); add: (9 to: 9); add: (13 to: 13); add: (10 to: 10); yourself))).
	definitions add: (generator Definition: 'ASSIGN' expression: (generator Literal: '<-')).
	definitions add: (generator Definition: 'SLASH' expression: (generator Literal: '/')).
	definitions add: (generator Definition: 'BACKSLASH' expression: (generator Literal: '\')).
	definitions add: (generator Definition: 'AND' expression: (generator Literal: '&')).
	definitions add: (generator Definition: 'NOT' expression: (generator Literal: '!')).
	definitions add: (generator Definition: 'COMMA' expression: (generator Literal: ',')).
	definitions add: (generator Definition: 'QUESTION' expression: (generator Literal: '?')).
	definitions add: (generator Definition: 'STAR' expression: (generator Literal: '*')).
	definitions add: (generator Definition: 'PLUS' expression: (generator Literal: '+')).
	definitions add: (generator Definition: 'DASH' expression: (generator Literal: '-')).
	definitions add: (generator Definition: 'DOT' expression: (generator Literal: '.')).
	definitions add: (generator Definition: 'QUOTE' expression: (generator Literal: '''')).
	definitions add: (generator Definition: 'DOUBLE_QUOTE' expression: (generator Literal: '"')).
	definitions add: (generator Definition: 'OPEN_BRACKET' expression: (generator Literal: '[')).
	definitions add: (generator Definition: 'CLOSE_BRACKET' expression: (generator Literal: ']')).
	definitions add: (generator Definition: 'OPEN_PAREN' expression: (generator Literal: '(')).
	definitions add: (generator Definition: 'CLOSE_PAREN' expression: (generator Literal: ')')).
	definitions add: (generator Definition: 'OPEN_BRACE' expression: (generator Literal: '{')).
	definitions add: (generator Definition: 'CLOSE_BRACE' expression: (generator Literal: '}')).
	definitions add: (generator Definition: 'OPEN_COMMENT' expression: (generator Literal: '/*')).
	definitions add: (generator Definition: 'CLOSE_COMMENT' expression: (generator Literal: '*/')).
	^generator Grammar: definitions